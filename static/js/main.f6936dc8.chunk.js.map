{"version":3,"sources":["Components/Header.js","Components/NewSection.js","Components/Education.js","Components/experience/Experience.js","Components/Skills.js","actions/api.js","actions/dClient.js","reducers/dClient.js","reducers/index.js","actions/store.js","Components/useForm.js","Components/ClientForm.js","Components/Client.js","Components/ContactMe.js","Components/Footer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Header","props","className","id","NewSection","title","description","Education","onClick","click","icon","faPlus","Experience","Skills","baseUrl","url","fetchAll","axios","get","fetchById","create","newRecord","post","update","updateRecord","put","delete","ACTION_TYPES","formateData","data","age","parseInt","initialState","list","reducers","combineReducers","dClient","state","action","type","payload","map","x","filter","store","createStore","compose","applyMiddleware","thunk","useForm","initialFieldValues","validate","setCurrentId","useState","values","setValues","errors","setErrors","handleInputChange","e","target","name","value","fieldValue","resetForm","fname","lname","mobile","email","mapActionToProps","createdClient","onSuccess","dispatch","api","then","res","catch","err","console","log","updatedClient","connect","dClientList","withStyles","theme","root","margin","spacing","minWidth","formControl","smMargin","classes","addToast","useToasts","fieldValues","temp","test","Object","every","useEffect","currentId","find","autoComplete","noValidate","onSubmit","preventDefault","appearance","Grid","container","item","xs","TextField","variant","label","firstName","onChange","error","helperText","lastName","Button","color","fetchAllDClients","response","deleteDClients","fontSize","paper","padding","Paper","elevation","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","record","index","key","hover","ButtonGroup","window","confirm","renderForm","ReactDOM","render","autoDismiss","Container","maxWidth","document","getElementById","ContactMe","Footer","href","App","jobs","business","time_spent","location","expState","job","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","StrictMode","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.f6936dc8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) =>{\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 id='my-name'>I'm Andrew Sieupresad</h1>\r\n            <h2 id='tag-line'>Student and Developer</h2>\r\n        </div>\r\n    )\r\n\r\n}; \r\n\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst NewSection = (props) =>{\r\n\r\n    return(\r\n        <div>\r\n            <h3>{props.title} </h3>\r\n            <p>{props.description}</p>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default NewSection;","import React from 'react';\r\nimport ReactDOM from 'react-dom'; \r\nimport NewSection from './NewSection';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Education = (props) => {\r\n\r\n    return(\r\n        <div className='education-section'>\r\n            <h2>Education.py</h2>\r\n            <h3>The Unversity of the West Indies</h3>\r\n                <p>Bachelor of Science in Computer Science (Special)</p>\r\n                <p>2017 to Present Day</p>\r\n\r\n            <h3>Hillview College</h3>\r\n                <p>September 2009 to June 2016</p>\r\n                <p>\r\n                Caribbean Advanced Profiency Examination (CAPE) - Passes in Pure Maths, Biology, Chemistry, Caribbean and Communication Studies\r\n                Caribbean Secindary Education Certificate (CSEC) - Grade 1 in 8 subjects\r\n                </p>\r\n            <div id=\"new-edu-section\"><a className='edu-btn'  onClick={props.click}><FontAwesomeIcon icon={faPlus}/></a></div>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n\r\n};\r\n\r\nexport default Education;","import React from 'react';\r\nimport NewSection from '../NewSection';\r\nimport ExperienceSection from './ExperienceSection';\r\n\r\n\r\n\r\nconst Experience = (props) => {\r\n\r\n    return(\r\n\r\n        // props.map(renderExperienceSection)\r\n        <div className='exp-section'>\r\n\r\n            <h3>{props.business}</h3> \r\n            <h3>{props.time_spent}</h3>\r\n            <p>{props.location}</p>\r\n            {/* \r\n            \r\n                HERE I WANTED TO ADD A DESCRIPTION LIKE I HAD IN PAST VERSION HOWEVER I WANTED TO \r\n                DEMONSTRATE PROPS BUT IT CAN BE DONE BY USING A DATA FILE FOR THE DESCRIPTION THEN \r\n                CALLING A NEXT COMPONENT TO RENDER THE DESCRIPTION IN THE WAY YOU WANTED FOR INSTANCE \r\n                IF YOU WANTED A CERTAIN PART TO BE A HEADER TAG OR PARAGRAPH TAAG\r\n        \r\n            */}\r\n\r\n        </div>\r\n        \r\n    )\r\n};\r\n\r\n\r\nexport default Experience;","import React from 'react';\r\n\r\n\r\n\r\n\r\n\r\nconst Skills = () => {\r\n\r\n    return(\r\n        <div className='skills-section'>\r\n            <h2>Skills.js</h2>\r\n            <p>Two years of C++ </p>\r\n            <p>Experience with Python, JavaScript, HTML and CSS</p>\r\n            <p>Familiar with React, Node.js, WordPress and proficient with GitHub</p>\r\n\r\n        </div>\r\n \r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default Skills;","\r\nimport axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:49231/api/\"\r\n\r\n\r\n\r\nexport default {\r\n\r\n    dClient(url = baseUrl + 'clients/') {\r\n        return {\r\n            // Methods that define the different requests from HTTPS\r\n            fetchAll: () => axios.get(url),\r\n            fetchById: id => axios.get(url + id),\r\n            create: newRecord => axios.post(url, newRecord),\r\n            update: (id, updateRecord) => axios.put(url + id, updateRecord),\r\n            delete: id => axios.delete(url + id)\r\n        }\r\n    }\r\n}","import api from './api';\r\n\r\nexport const ACTION_TYPES = {\r\n    CREATE: 'CREATE',\r\n    UPDATE: 'UPDATE',\r\n    DELETE: 'DELETE',\r\n    FETCH_ALL: 'FETCH_ALL'\r\n}\r\n\r\nconst formateData = data => ({\r\n    ...data,\r\n    age: parseInt(data.age ? data.age : 0)\r\n})\r\n\r\nexport const fetchAll = () => dispatch => {\r\n    api.dClient().fetchAll()\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch({\r\n                type: ACTION_TYPES.FETCH_ALL,\r\n                payload: response.data\r\n            })\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const create = (data, onSuccess) => dispatch => {\r\n    data = formateData(data)\r\n    api.dClient().create(data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.CREATE,\r\n                payload: res.data\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const update = (id, data, onSuccess) => dispatch => {\r\n    data = formateData(data)\r\n    api.dClient().update(id, data)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.UPDATE,\r\n                payload: { id, ...data }\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n\r\nexport const Delete = (id, onSuccess) => dispatch => {\r\n    api.dClient().delete(id)\r\n        .then(res => {\r\n            dispatch({\r\n                type: ACTION_TYPES.DELETE,\r\n                payload: id\r\n            })\r\n            onSuccess()\r\n        })\r\n        .catch(err => console.log(err))\r\n}\r\n","import {ACTION_TYPES} from '../actions/dClient'; \r\n\r\n\r\nconst initialState = {\r\n    list: []\r\n}\r\n\r\nexport const dClient = (state = initialState, action) =>{\r\n\r\n    switch (action.type) {\r\n        case ACTION_TYPES.FETCH_ALL:\r\n            return {\r\n                ...state,\r\n                list: [...action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.CREATE:\r\n            return {\r\n                ...state,\r\n                list: [...state.list, action.payload]\r\n            }\r\n\r\n        case ACTION_TYPES.UPDATE:\r\n            return {\r\n                ...state,\r\n                list: state.list.map(x => x.id == action.payload.id ? action.payload : x)\r\n            }\r\n\r\n        case ACTION_TYPES.DELETE:\r\n            return {\r\n                ...state,\r\n                list: state.list.filter(x => x.id != action.payload)\r\n            }\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { dClient } from \"./dClient\";\r\n\r\nexport const reducers = combineReducers({\r\n    dClient\r\n})","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport  {reducers} from '../reducers';\r\n\r\n\r\nexport const store = createStore(\r\n    reducers,\r\n    compose(\r\n        applyMiddleware(thunk)\r\n    )\r\n)\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useForm = (initialFieldValues, validate, setCurrentId) => {\r\n    const [values, setValues] = useState(initialFieldValues)\r\n    const [errors, setErrors] = useState({})\r\n\r\n    const handleInputChange = e => {\r\n        const { name, value } = e.target\r\n        const fieldValue = { [name]: value }\r\n        setValues({\r\n            ...values,\r\n            ...fieldValue\r\n        })\r\n        validate(fieldValue)\r\n    }\r\n\r\n    const resetForm = () => {\r\n        setValues({\r\n            ...initialFieldValues\r\n        })\r\n        setErrors({})\r\n        setCurrentId(0)\r\n    }\r\n\r\n    return {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    };\r\n}\r\n\r\nexport default useForm;","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from \"@material-ui/core\";\r\nimport useForm from \"./useForm\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/dClient\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin: {\r\n        margin: theme.spacing(1)\r\n    }\r\n})\r\n\r\n\r\n\r\nconst initialFieldValues = {\r\n    fname: '',\r\n    lname: '',\r\n    mobile: '',\r\n    email: ''\r\n}\r\n\r\nconst ClientForm = ({ classes, ...props }) => {\r\n    //toast msg.\r\n    const { addToast } = useToasts()\r\n\r\n    //validate()\r\n    //validate({fullName:'jenny'})\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('fname' in fieldValues)\r\n            temp.fname = fieldValues.fname ? \"\" : \"This field is required.\"\r\n        if ('mobile' in fieldValues)\r\n            temp.mobile = fieldValues.mobile ? \"\" : \"This field is required.\"\r\n        if ('lname' in fieldValues)\r\n            temp.lname = fieldValues.lname ? \"\" : \"This field is required.\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/^$|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n\r\n        if (fieldValues == values)\r\n            return Object.values(temp).every(x => x == \"\")\r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n    // material-ui select\r\n    // const inputLabel = React.useRef(null);\r\n    // const [labelWidth, setLabelWidth] = React.useState(0);\r\n    // React.useEffect(() => {\r\n    //     setLabelWidth(inputLabel.current.offsetWidth);\r\n    // }, []);\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        if (validate()) {\r\n            const onSuccess = () => {\r\n                resetForm()\r\n                addToast(\"Submitted successfully\", { appearance: 'success' })\r\n            }\r\n            if (props.currentId == 0)\r\n                props.createdClient(values, onSuccess)\r\n            else\r\n                props.updatedClient(props.currentId, values, onSuccess)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.currentId != 0) {\r\n            setValues({\r\n                ...props.dClientList.find(x => x.id == props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n    }, [props.currentId])\r\n\r\n\r\n\r\n    return (\r\n        <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <TextField\r\n                        name=\"fname\"\r\n                        variant=\"outlined\"\r\n                        label=\"First Name\"\r\n                        value={values.firstName}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.firstName && { error: true, helperText: errors.firstName })}\r\n                    />\r\n                    <TextField\r\n                        name=\"lname\"\r\n                        variant=\"outlined\"\r\n                        label=\"Last Name\"\r\n                        value={values.lastName}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.lastName && { error: true, helperText: errors.lastName })}\r\n                    />\r\n\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n\r\n                <TextField\r\n                        name=\"email\"\r\n                        variant=\"outlined\"\r\n                        label=\"Email\"\r\n                        value={values.email}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.email && { error: true, helperText: errors.email })}\r\n                    />\r\n\r\n                    <TextField\r\n                        name=\"mobile\"\r\n                        variant=\"outlined\"\r\n                        label=\"Mobile\"\r\n                        value={values.mobile}\r\n                        onChange={handleInputChange}\r\n                        {...(errors.mobile && { error: true, helperText: errors.mobile })}\r\n                    />\r\n                    <div>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                            className={classes.smMargin}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className={classes.smMargin}\r\n                            onClick={resetForm}\r\n                        >\r\n                            Reset\r\n                        </Button>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </form>\r\n    );\r\n\r\n}; \r\n\r\nconst mapStateToProps = state => ({\r\n    dClientList: state.dClient.list\r\n})\r\n\r\nconst mapActionToProps = {\r\n    createdClient: actions.create,\r\n    updatedClient: actions.update\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(ClientForm));","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/dClient\";\r\nimport { Grid, Paper, TableContainer, Table, TableHead, TableRow, TableCell, TableBody, withStyles, ButtonGroup, Button } from \"@material-ui/core\";\r\nimport ClientForm from \"./ClientForm\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useToasts } from \"react-toast-notifications\";\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        \"& .MuiTableCell-head\": {\r\n            fontSize: \"1.25rem\"\r\n        }\r\n    },\r\n    paper: {\r\n        margin: theme.spacing(2),\r\n        padding: theme.spacing(2)\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\nconst Client = ({ classes, ...props }) => {\r\n    const [currentId, setCurrentId] = useState(0)\r\n\r\n\r\n    // used whenever the value of the state is changed \r\n    useEffect(() => {\r\n        props.fetchAllDClients()\r\n    }, [])//componentDidMount\r\n    \r\n    const { addToast } = useToasts()\r\n\r\n    const onDelete = id => {\r\n        if (window.confirm('Are you sure to delete this record?'))\r\n            props.deleteDClients(id,()=>addToast(\"Deleted successfully\", { appearance: 'info' }))\r\n    }\r\n    \r\n    return (\r\n        <Paper className={classes.paper} elevation={3}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <ClientForm {...({ currentId, setCurrentId })} />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <TableHead className={classes.root}>\r\n                                <TableRow>\r\n                                    <TableCell>First Name</TableCell>\r\n                                    <TableCell>Last Name</TableCell>\r\n                                    <TableCell>Email</TableCell>\r\n                                    <TableCell>Mobile</TableCell>\r\n                                    <TableCell></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    props.dClientList.map((record, index) => {\r\n                                        return (<TableRow key={index} hover>\r\n                                            <TableCell>{record.fname}</TableCell>\r\n                                            <TableCell>{record.lname}</TableCell>\r\n                                            <TableCell>{record.email}</TableCell>\r\n                                            <TableCell>{record.mobile}</TableCell>\r\n                                            <TableCell>\r\n                                                <ButtonGroup variant=\"text\">\r\n                                                    <Button><EditIcon color=\"primary\"\r\n                                                        onClick={() => { setCurrentId(record.id) }} /></Button>\r\n                                                    <Button><DeleteIcon color=\"secondary\"\r\n                                                        onClick={() => onDelete(record.id)} /></Button>\r\n                                                </ButtonGroup>\r\n                                            </TableCell>\r\n                                        </TableRow>)\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    dClientList: state.dClient.list\r\n    // We have stored the list in the reducers DClient list \r\n})\r\n\r\nconst mapActionToProps = {\r\n    fetchAllDClients: actions.fetchAll,\r\n    deleteDClients: actions.Delete\r\n}\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(Client));\r\n// export default Client;","import React from 'react';\r\nimport {store} from '../actions/store';\r\nimport {Provider} from 'react-redux';\r\nimport Client from './Client';\r\nimport { Container } from \"@material-ui/core\";\r\nimport { ToastProvider } from \"react-toast-notifications\";\r\nimport ReactDOM from 'react-dom'; \r\n\r\nconst  renderForm = () => {\r\n\r\nReactDOM.render( \r\n            // passing props from parent to child. \r\n        <div>\r\n        <Provider store= {store}>\r\n            <ToastProvider autoDismiss={true}>  \r\n                <Container maxWidth='sm' ></Container>\r\n                <Client/>\r\n            </ToastProvider>\r\n        </Provider>\r\n        </div>,\r\n    \r\n            document.getElementById(\"form-section\") \r\n        ); \r\n    }\r\n\r\nconst ContactMe = () =>{\r\n\r\n    return(\r\n        <div className='contact-me'>\r\n            <h2>Get In Touch</h2>\r\n            <h3>Follow the InterWebs and they Shall Guide you </h3>   \r\n            <div id = \"form-section\"><a className=\"btn\" onClick={renderForm}>CONTACT ME</a></div>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n\r\n\r\n}; \r\n\r\n\r\nexport default ContactMe;","import React from 'react';\r\n\r\n\r\n\r\nconst Footer = () =>{\r\n    return(\r\n        <div className='footer'>\r\n            <a className=\"footer-link\" href=\"https://www.linkedin.com/\">LinkedIn</a>\r\n            <a className=\"footer-link\" href=\"https://twitter.com/\">Twitter</a>\r\n            <a className=\"footer-link\" href=\"https://www.appbrewery.co/\">Website</a>\r\n            <p className=\"end\">© 2020 Andrew.</p>\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default Footer;","import React,{ useState } from 'react';\nimport ReactDOM from 'react-dom'; \nimport {Provider} from 'react-redux';\n\nimport logo from './logo.svg';\nimport './App.css';\nimport './Components/Header';\nimport Header from './Components/Header';\nimport Education from './Components/Education';\nimport Experience from './Components/experience/Experience';\nimport Skills from './Components/Skills';\nimport NewSection from './Components/NewSection';\nimport ContactMe from './Components/ContactMe';\nimport Footer from './Components/Footer';\nimport {store} from './actions/store'; \n\n\nfunction App() {\n\n  /*\n    FUNCTIONAL STATE -> useState() RETURNS TWO ARRAYS ONE OF WHICH IS THE CURRENT STATE (expState) AND THE\n    THE OTHER BEING ONE WHICH CAN BE USED TO UPDATE THE STATE (setExpState)\n\n  */\nconst [expState, setExpState]  = useState({\n  jobs:[\n    {\n      business:'Tucker Holdings Limited', \n      time_spent:'2 months', \n      location: '1-5 Princess Margaret Street, San Fernando , Trinidad, W.I',\n    },\n    {\n      business: 'SEEC SEA Class', \n      time_spent:'3 months',\n      location: \"My Home (No Address cause I don't want to get doxed)\"\n    }\n  ]\n});\n\n\n/* SIDENOTE:   \n    I DIDN'T UPDATE THE STATE AS I WANTED TO SHOW THE FUNCTIONALTITY OF STATE BUT IT CAN BE \n    DONE BY CREATING A FUNCTION WHERE YOU CLICK SOMEWHERE ON THE DOM \n    (A BUTTON FOR INSTANCE LIKE WHAT I DID FOR EDUCATION)AND THEN USE setExpState to UPDATE THE \n    STATE BY UPADTING ADDING OR UPDATING DATA TO THE ARRAY OBJECT\n\n    Example:\n    const onClickHandler = () => {\n    setExpState( {\n        persons: [\n              {\n                business:'Tucker Holdings Limited', \n                time_spent:'10 months', \n                location: '1-5 Princess Margaret Street, San Fernando , Trinidad, W.I',\n              },\n              {\n                business: 'SEA Class', \n                time_spent:'1 year',\n                location: \"My Home (No Address cause I don't want to get doxed)\"\n              },\n              {\n                business: 'Intelligent Applications', \n                time_spent:'2 months',\n                location: \"Rodney Branch Rd, Endeavour\"\n              }\n        ]\n    });\n  }; \n*/\n\n\n/*THIS FUNCTION TAKE THE DIFFERENT ATTRIBUTES IN THE OBJECT IN THE STATE AND PASSES IT AS A PROP IN THE EXPERIENCE COMPONENT*/ \nfunction createNewExpLisitng(job){\n  return(\n    <Experience \n      business = {job.business}\n      time_spent = {job.time_spent}\n      location = {job.location}\n    />\n  )\n}\n\n/*THIS FUNCTION ALLOW US TO RENDER A NEW SECTION IN EDUCAITON GIVEN THAT A BUTTON IS CLICKED */ \nconst educationClickHandler = () =>{\n    ReactDOM.render( \n        // passing props from parent to child. \n        <div>\n          <NewSection title='Primary School' description ='Charlieville ASJA Primary' />\n        </div>,\n\n        document.getElementById(\"new-edu-section\") \n    ); \n}\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Education click={educationClickHandler}/>\n     \n      <div className = \"exp-container\">\n\n        <h2>Experience.exe</h2>\n\n        {/* WE MAP THE DIFFERENT OBJECTS IN THE OBJECT ARRAY (JOBS) IN STATE ONTO THE FUNCTION ABOVE */}\n        {expState.jobs.map(createNewExpLisitng)}\n      </div>\n  \n      <Skills/>\n      <ContactMe/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}